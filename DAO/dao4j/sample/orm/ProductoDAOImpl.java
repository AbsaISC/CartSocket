/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Mon May 18 08:42:30 CDT 2015
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package dao4j.sample.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import dao4j.sample.*;
import dao4j.sample.dao.ProductoDAO;

/**
 * This class provides methods to populate DB Table of Producto
 */
public class ProductoDAOImpl implements ProductoDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO Producto ("
        + "idProducto, imagen, producto, descripcion, precio, existencia"
        + ") VALUES (?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "idProducto, imagen, producto, descripcion, precio, existencia "
        + "FROM Producto WHERE "
        + "idProducto = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE Producto SET "
        + "imagen = ?, producto = ?, descripcion = ?, precio = ?, existencia = ? "
        + "WHERE "
        + "idProducto = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM Producto WHERE "
        + "idProducto = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Producto bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getIdproducto());
            if (bean.getImagen() != null)
                ps.setObject(2, bean.getImagen());
            else
                ps.setNull(2, Types.BLOB);
            ps.setString(3, bean.getProducto());
            ps.setString(4, bean.getDescripcion());
            ps.setDouble(5, bean.getPrecio());
            ps.setInt(6, bean.getExistencia());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Producto load(ProductoKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key.getIdproducto());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Producto) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Producto bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            if (bean.getImagen() != null)
                ps.setObject(1, bean.getImagen());
            else
                ps.setNull(1, Types.BLOB);
            ps.setString(2, bean.getProducto());
            ps.setString(3, bean.getDescripcion());
            ps.setDouble(4, bean.getPrecio());
            ps.setInt(5, bean.getExistencia());
            ps.setInt(6, bean.getIdproducto());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(ProductoKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key.getIdproducto());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Producto> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Producto>();
        while (rs.next()) {
            Producto bean = new Producto();
            bean.setIdproducto(rs.getInt("idProducto"));
            bean.setImagen(rs.getObject("imagen", java.sql.Blob.class));
            bean.setProducto(rs.getString("producto"));
            bean.setDescripcion(rs.getString("descripcion"));
            bean.setPrecio(rs.getDouble("precio"));
            bean.setExistencia(rs.getInt("existencia"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}